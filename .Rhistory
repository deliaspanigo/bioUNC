runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
# Define UI
ui <- fluidPage(
titlePanel("Aumentar tamaño de letra en selectInput"),
tags$head(
tags$style(HTML('.selectize-control { font-size: 16px; }'))
),
sidebarLayout(
sidebarPanel(
selectInput("opcion1", "Seleccionar una opción 1:", choices = c("Opción 1", "Opción 2", "Opción 3")),
selectInput("opcion2", "Seleccionar una opción 2:", choices = c("Opción 1", "Opción 2", "Opción 3")),
selectInput("opcion3", "Seleccionar una opción 3:", choices = c("Opción 1", "Opción 2", "Opción 3"))
),
mainPanel(
textOutput("opcion_seleccionada")
)
)
)
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
library(shiny)
# Define UI
ui <- fluidPage(
titlePanel("Aumentar espacio entre opciones en selectInput"),
sidebarLayout(
sidebarPanel(
selectInput("opcion", "Seleccionar una opción:",
choices = c("Opción 1", "Opción 2", "Opción 3"),
selectizeOptions = list(render = I('{
option {
font-size: 16px;
margin-bottom: 10px; /* Espacio entre opciones */
}
}')))
),
mainPanel(
textOutput("opcion_seleccionada")
)
)
)
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v01.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
library(shiny)
library(shinydashboard)
# Define UI
ui <- dashboardPage(
dashboardHeader(title = "Encabezado en negrita"),
dashboardSidebar(),
dashboardBody(
tags$head(
tags$style(
HTML('.custom-h2 { font-weight: bold; }') # Estilos CSS para aplicar negrita solo a la clase custom-h2
)
),
fluidRow(
box(title = "Contenido", status = "primary", solidHeader = TRUE,
tags$h2("Este es un encabezado h2 normal"), # Encabezado h2 normal
tags$h2("Este es un encabezado h2 en negrita", class = "custom-h2") # Encabezado h2 con clase custom-h2 para aplicar estilos específicos
)
)
)
)
# Define server logic
server <- function(input, output, session) {
}
# Run the application
shinyApp(ui = ui, server = server)
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
# Ejemplo de lista
lista <- list(
A = c(1, 2, 3),
B = c("a", "b", "c"),
C = c(TRUE, FALSE, TRUE)
)
# Convertir lista a dataframe
df <- do.call(rbind, lista)
# Imprimir el dataframe resultante
print(df)
lista
as.data.frame(lista)
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
library(shiny); runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
# Ejemplo de lista
lista <- list(
A = c(1, 2, 3),
B = c("a", "b", "c"),
C = c(TRUE, FALSE, TRUE)
)
# Convertir lista a dataframe
df <- do.call(rbind, lista)
df
as.data.frame(lista)
data.frame(lista)
lista <- list(
"A" = c(1, 2, 3),
"B" = c("a", "b", "c"),
"C" = c(TRUE, FALSE, TRUE)
)
lista
lista <- list(
"A" = c(1, 2, 3),
"B" = c("a", "b", "c"),
"C" = c(TRUE, FALSE, TRUE)
)
lista
as.data.frame(lista)
lista <- list(
"A" = c(1, 2, 3),
"B" = c("a", "b", "c"),
"C" = c(TRUE, FALSE, TRUE)
)
lista
as.data.frame(lista)
data.frame(lista)
lista <- list(
"A" = c(1, 2, 3),
"B" = c("a", "b", "c"),
"C" = c(TRUE, FALSE, TRUE)
)
lista
as.data.frame(lista)
data.frame(lista)
lista <- list(
"A A" = c(1, 2, 3),
"B" = c("a", "b", "c"),
"C" = c(TRUE, FALSE, TRUE)
)
lista
as.data.frame(lista)
data.frame(lista)
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
library(shiny)
library(shinydashboard)
# Define UI
ui <- dashboardPage(
dashboardHeader(title = "Cambiar tamaño de pestañas"),
dashboardSidebar(),
dashboardBody(
tags$head(
tags$style(
HTML("
.nav-tabs-custom > .nav-tabs > li > a {
font-size: 16px; /* Cambiar tamaño de fuente de las pestañas */
padding-top: 10px; /* Aumentar espacio superior de las pestañas */
padding-bottom: 10px; /* Aumentar espacio inferior de las pestañas */
}
")
)
),
tabItems(
tabItem(tabName = "tab1",
h2("Contenido de la pestaña 1")
),
tabItem(tabName = "tab2",
h2("Contenido de la pestaña 2")
)
)
)
)
# Define server logic
server <- function(input, output, session) {
}
# Run the application
shinyApp(ui = ui, server = server)
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
View(super_sheet_info)
View(super_sheet_info)
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
library(shiny)
library(shinyWidgets)
# Define UI
ui <- fluidPage(
titlePanel("Tabla con límites y contenido centrado"),
tableOutput("tabla")
)
# Define server logic
server <- function(input, output, session) {
output$tabla <- renderTable({
# Datos de ejemplo
datos <- data.frame(
A = c(1, 2, 3),
B = c("a", "b", "c"),
C = c(TRUE, FALSE, TRUE)
)
# Crear tablaHTML con estilos personalizados
tableHTML(datos,
headers = colnames(datos),
align = "c", # Centrar el contenido
borders = c("inner", "horizontal"), # Marcar límites de la tabla
widths = "100%" # Ancho de la tabla al 100%
)
}, rownames = FALSE)
}
# Run the application
shinyApp(ui = ui, server = server)
runApp('app_01_anova_v02.R')
install.packages("shinyWidgets")
install.packages("shinyWidgets")
library(shinyWidgets)
library(shiny); runApp('app_01_anova_v02.R')
library(shiny)
library(shinyWidgets)
# Define UI
ui <- fluidPage(
titlePanel("Tabla con límites y contenido centrado"),
tableOutput("tabla")
)
# Define server logic
server <- function(input, output, session) {
output$tabla <- renderTable({
# Datos de ejemplo
datos <- data.frame(
A = c(1, 2, 3),
B = c("a", "b", "c"),
C = c(TRUE, FALSE, TRUE)
)
# Crear tablaHTML con estilos personalizados
tableHTML(datos,
headers = colnames(datos),
align = "c", # Centrar el contenido
borders = c("inner", "horizontal"), # Marcar límites de la tabla
widths = "100%" # Ancho de la tabla al 100%
)
}, rownames = FALSE)
}
# Run the application
shinyApp(ui = ui, server = server)
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
library(shiny)
library(shinydashboard)
# Define UI
ui <- dashboardPage(
dashboardHeader(
title = "Custom Background Color",
tags$li(a(href = "https://www.example.com", target = "_blank", "Link"), class = "dropdown")
),
dashboardSidebar(),
dashboardBody()
)
# Define server logic
server <- function(input, output, session) {
}
# Define custom CSS styles
ui <- tagAppendAttributes(ui,
list(tags$style(
HTML(".main-header {background-color: #336699;}") # Cambia el color de fondo del dashboardHeader
)))
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
#rm(list = ls())
library(shinydashboard)
library(shiny)
library(DT)
library(shinyWidgets)
library(dplyr)
ui=shinyUI(
dashboardPage(
dashboardHeader(
title = "Example of a long title that needs more space",
titleWidth = 450
),
dashboardSidebar( sidebarMenu(
menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),
menuItem("Widgets", icon = icon("th"), tabName = "widgets",
badgeLabel = "new", badgeColor = "green")
)),
dashboardBody(
tags$head(tags$style(HTML('
/* logo */
.skin-blue .main-header .logo {
background-color: #f4b943;
}
/* logo when hovered */
.skin-blue .main-header .logo:hover {
background-color: #f4b943;
}
/* navbar (rest of the header) */
.skin-blue .main-header .navbar {
background-color: #f4b943;
}
/* main sidebar */
.skin-blue .main-sidebar {
background-color: #f4b943;
}
/* active selected tab in the sidebarmenu */
.skin-blue .main-sidebar .sidebar .sidebar-menu .active a{
background-color: #ff0000;
}
/* other links in the sidebarmenu */
.skin-blue .main-sidebar .sidebar .sidebar-menu a{
background-color: #00ff00;
color: #000000;
}
/* other links in the sidebarmenu when hovered */
.skin-blue .main-sidebar .sidebar .sidebar-menu a:hover{
background-color: #ff69b4;
}
/* toggle button when hovered  */
.skin-blue .main-header .navbar .sidebar-toggle:hover{
background-color: #ff69b4;
}
/* body */
.content-wrapper, .right-side {
background-color: #7da2d1;
}
')))
)
)
)
server=shinyServer(function(input,output,session){})
shinyApp(ui,server)
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
library(shiny)
# Definir UI
ui <- fluidPage(
verbatimTextOutput("texto")
)
# Definir server
server <- function(input, output, session) {
output$texto <- renderPrint({
# Lista de objetos
datos <- list("Dato 1", "Dato 2", "Dato 3")
# Convertir la lista en una cadena de texto con saltos de línea entre los elementos
datos_formateados <- paste(datos, collapse = "\n\n")
datos_formateados
})
}
# Correr la aplicación
shinyApp(ui = ui, server = server)
runApp('app_01_anova_v02.R')
aver01 <- list("A", "B", "C")
paste0(aver01, "\n")
aver01 <- list("A", "B", "C")
new_space <- rep("\n", length(aver01))
append(aver01, new_space)
nueva_lista <- c(rbind(aver01, new_space))
nueva_lista
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
library(shiny); runApp('app_01_anova_v02.R')
