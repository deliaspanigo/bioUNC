vector_names <- c("Orden", "Details", "Check")
df_control <- as.data.frame(matrix(NA, 100, length(vector_names))
colnames(df_control) <- vector_names
vector_names <- c("Orden", "Details", "Check")
df_control <- as.data.frame(matrix(NA, 100, length(vector_names)))
colnames(df_control) <- vector_names
df_control$Check <- FALSE
df_control$Check
df_control
vector_names <- c("Orden", "Details", "Check", "Message")
df_control <- as.data.frame(matrix(NA, 100, length(vector_names)))
colnames(df_control) <- vector_names
df_control$Check <- FALSE
df_control$Message <- ""
vector_names <- c("Orden", "Details", "Check", "Message")
df_control <- as.data.frame(matrix(NA, 100, length(vector_names)))
colnames(df_control) <- vector_names
vector_names <- c("Orden", "Details", "Check", "Message")
df_control <- as.data.frame(matrix(NA, 100, length(vector_names)))
colnames(df_control) <- vector_names
df_control$Check <- FALSE
df_control$Message <- ""
df_control
vector_names <- c("Orden", "Details", "Check", "Message")
df_control <- as.data.frame(matrix(NA, 100, length(vector_names)))
database <- mtcars
name_var_vr <- "mpg"
name_var_factor <- "cyl"
alpha_value <- 0.05
vector_names <- c("Orden", "Details", "Check", "Message")
df_control <- as.data.frame(matrix(NA, 100, length(vector_names)))
colnames(df_control) <- vector_names
df_control$Check <- FALSE
df_control$Message <- ""
is.numeric(NA)
"A" in "AA"
database <- mtcars
name_var_vr <- "mpg"
name_var_factor <- "cyl"
alpha_value <- 0.05
control_anova <- function(database, name_var_vr, name_var_factor, alpha_value){
# # # Control 'database'
if (is.null(database)) {
stop("Error: 'database' cannot be NULL.")
}
if (!is.data.frame(database)) {
stop("Error: 'database' must be a data.frame.")
}
if (ncol(dataframe) == 0) {
stop("Error: 'database' must haveat least one column.")
}
if (nrow(dataframe) == 0) {
stop("Error: 'database' must have at least one row.")
}
# # # Control 'alpha_value'
if (is.null(alpha_value)) {
stop("Error: 'alpha_value'cannot be NULL.")
}
if (!is.vector(alpha_value)) {
stop("Error: 'alpha_value' must be a vector.")
}
if (length(alpha_value) != 1) {
stop("Error: 'alpha_value' must be a vector of length 1.")
}
if (is.na(alpha_value)) {
stop("Error: 'alpha_value' must be NA.")
}
if (!is.numeric(alpha_value)) {
stop("Error: 'alpha_value' must be numeric.")
}
# # # Special Control 1 of 3 - 'name_var_vr'
if (is.null(name_var_vr)) {
stop("Error: 'name_var_vr'cannot be NULL.")
}
if (!is.vector(name_var_vr)) {
stop("Error: 'name_var_vr' must be a vector.")
}
if (length(name_var_vr) != 1) {
stop("Error: 'name_var_vr' must be a vector of length 1.")
}
if (is.na(name_var_vr)) {
stop("Error: 'name_var_vr' must be NA.")
}
if (!is.character(name_var_vr)) {
stop("Error: 'name_var_vr' must be numeric.")
}
# # # Special Control 2 of 3 - 'name_var_factor'
if (is.null(name_var_factor)) {
stop("Error: 'name_var_factor'cannot be NULL.")
}
if (!is.vector(name_var_factor)) {
stop("Error: 'name_var_factor' must be a vector.")
}
if (length(name_var_factor) != 1) {
stop("Error: 'name_var_factor' must be a vector of length 1.")
}
if (is.na(name_var_factor)) {
stop("Error: 'name_var_factor' must be NA.")
}
if (!is.character(name_var_factor)) {
stop("Error: 'name_var_factor' must be numeric.")
}
# # # Special Control 3 of 3 - 'name_var_vr' and 'name_var_factor'
if (name_var_vr == name_var_factor) {
stop("Error: 'name_var_factor' and 'name_var_vr' cannot be equals.")
}
vector_name_vars <- colnames(database)
if (!(name_var_vr %in% vector_name_vars)) {
stop("Error: 'name_var_vr' must be the name of a variable in 'database'.")
}
if (!(name_var_factor %in% vector_name_vars)) {
stop("Error: 'name_var_factor' must be the name of a variable in 'database'.")
}
cat("The data has been verified successfully.\n")
}
co
control_anova(database, name_var_vr, name_var_factor, alpha_value)
database <- mtcars
name_var_vr <- "mpg"
name_var_factor <- "cyl"
alpha_value <- 0.05
control_anova <- function(database, name_var_vr, name_var_factor, alpha_value){
# # # Control 'database'
if (is.null(database)) {
stop("Error: 'database' cannot be NULL.")
}
if (!is.data.frame(database)) {
stop("Error: 'database' must be a data.frame.")
}
if (ncol(database) == 0) {
stop("Error: 'database' must haveat least one column.")
}
if (nrow(database) == 0) {
stop("Error: 'database' must have at least one row.")
}
# # # Control 'alpha_value'
if (is.null(alpha_value)) {
stop("Error: 'alpha_value'cannot be NULL.")
}
if (!is.vector(alpha_value)) {
stop("Error: 'alpha_value' must be a vector.")
}
if (length(alpha_value) != 1) {
stop("Error: 'alpha_value' must be a vector of length 1.")
}
if (is.na(alpha_value)) {
stop("Error: 'alpha_value' must be NA.")
}
if (!is.numeric(alpha_value)) {
stop("Error: 'alpha_value' must be numeric.")
}
# # # Special Control 1 of 3 - 'name_var_vr'
if (is.null(name_var_vr)) {
stop("Error: 'name_var_vr'cannot be NULL.")
}
if (!is.vector(name_var_vr)) {
stop("Error: 'name_var_vr' must be a vector.")
}
if (length(name_var_vr) != 1) {
stop("Error: 'name_var_vr' must be a vector of length 1.")
}
if (is.na(name_var_vr)) {
stop("Error: 'name_var_vr' must be NA.")
}
if (!is.character(name_var_vr)) {
stop("Error: 'name_var_vr' must be numeric.")
}
# # # Special Control 2 of 3 - 'name_var_factor'
if (is.null(name_var_factor)) {
stop("Error: 'name_var_factor'cannot be NULL.")
}
if (!is.vector(name_var_factor)) {
stop("Error: 'name_var_factor' must be a vector.")
}
if (length(name_var_factor) != 1) {
stop("Error: 'name_var_factor' must be a vector of length 1.")
}
if (is.na(name_var_factor)) {
stop("Error: 'name_var_factor' must be NA.")
}
if (!is.character(name_var_factor)) {
stop("Error: 'name_var_factor' must be numeric.")
}
# # # Special Control 3 of 3 - 'name_var_vr' and 'name_var_factor'
if (name_var_vr == name_var_factor) {
stop("Error: 'name_var_factor' and 'name_var_vr' cannot be equals.")
}
vector_name_vars <- colnames(database)
if (!(name_var_vr %in% vector_name_vars)) {
stop("Error: 'name_var_vr' must be the name of a variable in 'database'.")
}
if (!(name_var_factor %in% vector_name_vars)) {
stop("Error: 'name_var_factor' must be the name of a variable in 'database'.")
}
cat("The data has been verified successfully.\n")
}
control_anova(database, name_var_vr, name_var_factor, alpha_value)
database <- mtcars
name_var_vr <- "mpg"
name_var_factor <- "cyl"
alpha_value <- "0.05"
control_anova <- function(database, name_var_vr, name_var_factor, alpha_value){
# # # Control 'database'
if (is.null(database)) {
stop("Error: 'database' cannot be NULL.")
}
if (!is.data.frame(database)) {
stop("Error: 'database' must be a data.frame.")
}
if (ncol(database) == 0) {
stop("Error: 'database' must haveat least one column.")
}
if (nrow(database) == 0) {
stop("Error: 'database' must have at least one row.")
}
# # # Control 'alpha_value'
if (is.null(alpha_value)) {
stop("Error: 'alpha_value'cannot be NULL.")
}
if (!is.vector(alpha_value)) {
stop("Error: 'alpha_value' must be a vector.")
}
if (length(alpha_value) != 1) {
stop("Error: 'alpha_value' must be a vector of length 1.")
}
if (is.na(alpha_value)) {
stop("Error: 'alpha_value' must be NA.")
}
if (!is.numeric(alpha_value)) {
stop("Error: 'alpha_value' must be numeric.")
}
# # # Special Control 1 of 3 - 'name_var_vr'
if (is.null(name_var_vr)) {
stop("Error: 'name_var_vr'cannot be NULL.")
}
if (!is.vector(name_var_vr)) {
stop("Error: 'name_var_vr' must be a vector.")
}
if (length(name_var_vr) != 1) {
stop("Error: 'name_var_vr' must be a vector of length 1.")
}
if (is.na(name_var_vr)) {
stop("Error: 'name_var_vr' must be NA.")
}
if (!is.character(name_var_vr)) {
stop("Error: 'name_var_vr' must be numeric.")
}
# # # Special Control 2 of 3 - 'name_var_factor'
if (is.null(name_var_factor)) {
stop("Error: 'name_var_factor'cannot be NULL.")
}
if (!is.vector(name_var_factor)) {
stop("Error: 'name_var_factor' must be a vector.")
}
if (length(name_var_factor) != 1) {
stop("Error: 'name_var_factor' must be a vector of length 1.")
}
if (is.na(name_var_factor)) {
stop("Error: 'name_var_factor' must be NA.")
}
if (!is.character(name_var_factor)) {
stop("Error: 'name_var_factor' must be numeric.")
}
# # # Special Control 3 of 3 - 'name_var_vr' and 'name_var_factor'
if (name_var_vr == name_var_factor) {
stop("Error: 'name_var_factor' and 'name_var_vr' cannot be equals.")
}
vector_name_vars <- colnames(database)
if (!(name_var_vr %in% vector_name_vars)) {
stop("Error: 'name_var_vr' must be the name of a variable in 'database'.")
}
if (!(name_var_factor %in% vector_name_vars)) {
stop("Error: 'name_var_factor' must be the name of a variable in 'database'.")
}
cat("The data has been verified successfully.\n")
}
control_anova(database, name_var_vr, name_var_factor, alpha_value)
library(shiny); runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp()
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
library(shiny); runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
library(shiny); runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
install.packages("openxlsx")
install.packages("openxlsx")
library(shiny); runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
library(shiny)
ui <- shinyUI(bootstrapPage(
headerPanel("Reset / Submit file input example"),
sidebarPanel(
fileInput('file1', label = NULL),
fluidRow(
column(4,
actionButton('reset', 'Reset Input')
))
),
mainPanel(
h4("Summary"),
verbatimTextOutput("summary")
)
))
server <- shinyServer(function(input, output, session) {
values <- reactiveValues(
upload_state = NULL
)
observeEvent(input$file1, {
values$upload_state <- 'uploaded'
})
observeEvent(input$reset, {
values$upload_state <- 'reset'
})
file_input <- reactive({
if (is.null(values$upload_state)) {
return(NULL)
} else if (values$upload_state == 'uploaded') {
return(input$file1)
} else if (values$upload_state == 'reset') {
return(NULL)
}
})
output$summary <- renderText({
return(paste("Uploaded file:", file_input()$name))
})
})
shinyApp(ui = ui, server = server)
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
library(shiny); runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
library(shiny); runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
req("A")
req(NULL)
req("NULL")
req("")
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
req(NULL)
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
req(NULL) else "asdas"
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
runApp('app_01_anova_v02.R')
# Determinar el tamaño del objeto mtcars
tamaño_mtcars <- object.size(mtcars)
print(tamaño_mtcars)  # Imprimir el tamaño del objeto mtcars
