# Crear un gráfico de dispersión de ejemplo
x <- 1:10
# Crear un gráfico de dispersión de ejemplo
x <- 1:10
y <- rnorm(10)
plot(x, y, type = "b", main = "Gráfico con Línea Horizontal")
# Crear un gráfico de dispersión de ejemplo
x <- 1:10
y <- rnorm(10)
plot(x, y, type = "b", main = "Gráfico con Línea Horizontal")
# Agregar una línea horizontal en y = 1.96
abline(h = c(0, 1), col = "red", lty = 2)
runApp()
runApp()
runApp()
runApp()
runApp()
dale_play <- ancova_with_full_gen01(database, selected_pos_vars, alpha_value)
database <- mtcars
pos_var_vr <- 1
pos_var_reg <- 3
alpha_value <- 0.05
selected_pos_vars <- c(pos_var_vr, pos_var_reg)
dale_play <- ancova_with_full_gen01(database, selected_pos_vars, alpha_value)
database <- mtcars
pos_var_vr <- 1
pos_var_reg <- 3
alpha_value <- 0.05
#selected_pos_vars <- c(pos_var_vr, pos_var_reg)
dale_play <- aslr_full_gen01(database, pos_var_vr, pos_var_reg, alpha_value)
database <- mtcars
pos_var_vr <- 1
pos_var_reg <- 3
alpha_value <- 0.05
#selected_pos_vars <- c(pos_var_vr, pos_var_reg)
dale_play <- slr_full_gen01(database, pos_var_vr, pos_var_reg, alpha_value)
# En la primera porcion, graficamos los puntos con color
plot(x = minibase_mod$fitted.values, y = minibase_mod$rstandard,
col = "red",
ylim = vector_lim_y,
#xlab = df_selected_vars$doble_reference[3],
#ylab = df_selected_vars$doble_reference[1],
main = set_main04, type = "p", pch = 19, axes = FALSE)
dale_play <- slr_full_gen01(database, pos_var_vr, pos_var_reg, alpha_value)
minibase_mod <- dale_play$minibase_mod
# En la primera porcion, graficamos los puntos con color
plot(x = minibase_mod$fitted.values, y = minibase_mod$rstandard,
col = "red",
ylim = vector_lim_y,
#xlab = df_selected_vars$doble_reference[3],
#ylab = df_selected_vars$doble_reference[1],
main = set_main04, type = "p", pch = 19, axes = FALSE)
minibase_mod <- dale_play$minibase_mod
############################################3
min_abs_y <- 4
general_max_y <- ceiling(max(abs(minibase_mod$rstandard))) + 1
if(general_max_y < min_abs_y) general_max_y <- min_abs_y
vector_lim_y <- c(-general_max_y, general_max_y)
limit_lines_y <- c(-1.96, 0, 1.96)
# X axis
min_x <- min(minibase_mod$fitted.values)
max_x <- max(minibase_mod$fitted.values)
##############################################
# En la primera porcion, graficamos los puntos con color
plot(x = minibase_mod$fitted.values, y = minibase_mod$rstandard,
col = "red",
ylim = vector_lim_y,
#xlab = df_selected_vars$doble_reference[3],
#ylab = df_selected_vars$doble_reference[1],
main = set_main04, type = "p", pch = 19, axes = FALSE)
axis(1, at = seq(-min_x, max_x, length.out = 6))
axis(2, at = seq(-general_max_y, general_max_y, by = 1))
seq(-min_x, max_x, length.out = 6)
axis(1, at = round(seq(-min_x, max_x, length.out = 6), 0))
seq(-min_x, max_x, length.out = 6)
# En la primera porcion, graficamos los puntos con color
plot(x = minibase_mod$fitted.values, y = minibase_mod$rstandard,
col = "red",
ylim = vector_lim_y,
#xlab = df_selected_vars$doble_reference[3],
#ylab = df_selected_vars$doble_reference[1],
main = set_main04, type = "p", pch = 19, axes = FALSE)
axis(1, at = seq(-min_x, max_x, length.out = 6))
axis(2, at = seq(-general_max_y, general_max_y, by = 1))
seq(-min_x, max_x, length.out = 6)
runApp()
runApp()
runApp()
runApp()
runApp()
plot(mtcars)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(shiny)
ui <- fluidPage(
radioButtons("opcion", "Seleccione una opción:",
choices = c("Opción 1", "Opción 2", "Opción 3")),
tabsetPanel(
id = "tabs",
tabPanel("Inicio"),
conditionalPanel(
condition = "input.opcion == 'Opción 1'",
tabPanel("Pestaña 1", "Contenido de la Pestaña 1")
),
conditionalPanel(
condition = "input.opcion == 'Opción 2'",
tabPanel("Pestaña 2", "Contenido de la Pestaña 2")
),
conditionalPanel(
condition = "input.opcion == 'Opción 3'",
tabPanel("Pestaña 3", "Contenido de la Pestaña 3")
)
)
)
server <- function(input, output, session) {}
shinyApp(ui, server)
runApp()
runApp()
runApp()
runApp()
runApp()
# example app for inserting/removing a tab
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
actionButton("add", "Add 'Dynamic' tab"),
actionButton("remove", "Remove 'Foo' tab")
),
mainPanel(
tabsetPanel(id = "tabs",
tabPanel("Hello", "This is the hello tab"),
tabPanel("Foo", "This is the foo tab"),
tabPanel("Bar", "This is the bar tab")
)
)
)
)
server <- function(input, output, session) {
observeEvent(input$add, {
insertTab(inputId = "tabs",
tabPanel("Dynamic", "This a dynamically-added tab"),
target = "Bar"
)
})
observeEvent(input$remove, {
removeTab(inputId = "tabs", target = "Foo")
})
}
shinyApp(ui, server)
runApp()
ns <- shiny::NS(id)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# example app for inserting/removing a tab
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
actionButton("add", "Add 'Dynamic' tab"),
actionButton("remove", "Remove 'Foo' tab")
),
mainPanel(
tabsetPanel(id = "tabs",
tabPanel("Hello", "This is the hello tab"),
tabPanel("Foo", "This is the foo tab"),
tabPanel("Bar", "This is the bar tab")
)
)
)
)
server <- function(input, output, session) {
observeEvent(input$add, {
insertTab(inputId = "tabs",
tabPanel("Dynamic", "This a dynamically-added tab"),
target = "Bar"
)
})
observeEvent(input$remove, {
removeTab(inputId = "tabs", target = "Foo")
})
}
shinyApp(ui, server)
# example app for inserting/removing a tab
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
actionButton("add", "Add 'Dynamic' tab"),
actionButton("remove", "Remove 'Foo' tab")
),
mainPanel(
tabsetPanel(id = "tabs",
tabPanel("Hello", "This is the hello tab"),
tabPanel("Foo", "This is the foo tab"),
tabPanel("Bar", "This is the bar tab")
)
)
)
)
server <- function(input, output, session) {
observeEvent(input$add, {
insertTab(inputId = "tabs",
tabPanel("Dynamic", "This a dynamically-added tab"),
target = "Bar"
)
})
observeEvent(input$remove, {
removeTab(inputId = "tabs", target = "Foo")
})
}
shinyApp(ui, server)
runApp()
runApp()
runApp()
runApp()
runApp()
library(shiny)
library(shinyjs)
ui <- fluidPage(
useShinyjs(),  # Inicializar shinyjs
tabsetPanel(
id = "tabs1",
tabPanel("Pestaña 1A", "Contenido de la Pestaña 1A"),
tabPanel("Pestaña 2A", "Contenido de la Pestaña 2A")
),
tabsetPanel(
id = "tabs2",
tabPanel("Pestaña 1B", "Contenido de la Pestaña 1B"),
tabPanel("Pestaña 2B", "Contenido de la Pestaña 2B")
),
actionButton("fusionar", "Fusionar Pestañas")
)
server <- function(input, output, session) {
observeEvent(input$fusionar, {
# Obtener el contenido de las pestañas del segundo tabsetPanel
pestañas2 <- querySelectorAll("#tabs2 .tabbable .nav-tabs li")
# Mover cada pestaña al primer tabsetPanel
lapply(pestañas2, function(pestaña) {
appendTab("tabs1", tabPanel(id = pestaña$id, value = pestaña$id, pestaña$textContent))
})
# Eliminar el segundo tabsetPanel
shinyjs::disable("#tabs2")
})
}
shinyApp(ui, server)
runApp()
ui <- fluidPage(
useShinyjs(),  # Inicializar shinyjs
tags$head(
# CSS personalizado para cambiar el color de fondo de la pestaña deseada
tags$style(HTML("
#tabs1 .nav-tabs .nav-item:nth-child(2) a {
background-color: #ffcccb; /* Cambiar el color de fondo según tus preferencias */
}
"))
),
tabsetPanel(
id = "tabs1",
tabPanel("Pestaña 1", "Contenido de la Pestaña 1"),
tabPanel("Pestaña 2", "Contenido de la Pestaña 2"),
tabPanel("Pestaña 3", "Contenido de la Pestaña 3")
)
)
shinyApp(ui, server)
library(shiny)
library(shinyjs)
ui <- fluidPage(
useShinyjs(),  # Inicializar shinyjs
tags$head(
# CSS personalizado para cambiar el color de fondo de la pestaña deseada
tags$style(HTML("
#tabs1 .nav-tabs .nav-item:nth-child(2) a {
background-color: #ffcccb; /* Cambiar el color de fondo según tus preferencias */
}
"))
),
tabsetPanel(
id = "tabs1",
tabPanel("Pestaña 1", "Contenido de la Pestaña 1"),
tabPanel("Pestaña 2", "Contenido de la Pestaña 2"),
tabPanel("Pestaña 3", "Contenido de la Pestaña 3")
)
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
tags$head(
tags$style(HTML("
#mi_tab2 a {
background-color: #ffcccb; /* Cambiar el color de fondo según tus preferencias */
}
"))
),
tabsetPanel(
tabPanel("Tab 1", "Contenido de la Pestaña 1"),
tabPanel(id = "mi_tab2", "Tab 2", "Contenido de la Pestaña 2"),
tabPanel("Tab 3", "Contenido de la Pestaña 3")
)
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
c(NA, 5, 53)/1
strsplit(c("asdas-asdasd", "asdadas-dfgdfg"), "-")
aver <- c("asdas-asdasd", "asdadas-dfgdfg")
sapply(aver, function(x){
strsplit(x, "-")
}
aver <- c("asdas-asdasd", "asdadas-dfgdfg")
aver <- c("asdas-asdasd", "asdadas-dfgdfg")
sapply(aver, function(x){
strsplit(x, "-")
})
aver <- c("asdas-asdasd", "asdadas-dfgdfg")
sapply(aver, function(x){
strsplit(x, "-")[[1]]
})
aver <- c("asdas-asdasd", "asdadas-dfgdfg")
sapply(aver, function(x){
strsplit(x, "-")[[1]][2]
})
aver <- c("asdas-asdasd", "asdadas-dfgdfg", NA)
sapply(aver, function(x){
strsplit(x, "-")[[1]][2]
})
strsplit(valor_01, "-")
ls()
library(openxlsx)
shiny::runApp()
runApp()
runApp()
